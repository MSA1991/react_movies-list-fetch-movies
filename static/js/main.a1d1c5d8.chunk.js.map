{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","imgUrl","title","description","imdbUrl","className","src","alt","href","MoviesList","movies","map","imdbId","FindMovie","addMovie","useState","query","setQuery","setMovie","isLoading","setIsLoading","hasLoadingError","setHasLoadingError","onSubmit","event","preventDefault","fetch","then","res","json","catch","Response","Error","getMovie","trim","result","Title","Plot","imdbID","Poster","finally","htmlFor","type","id","placeholder","value","onChange","e","target","disabled","classNames","onClick","App","setMovies","newMovie","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1d1c5d8.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => {\n  const {\n    imgUrl,\n    title,\n    description,\n    imdbUrl,\n  } = movie;\n\n  return (\n    <div className=\"card\" data-cy=\"movieCard\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            data-cy=\"moviePoster\"\n            src={imgUrl}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movieTitle\">\n              {title}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"movieDescription\">\n          {description}\n          <br />\n          <a href={imdbUrl} data-cy=\"movieURL\">\n            IMDB\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { MovieCard } from '../MovieCard';\n\nimport './FindMovie.scss';\n\nimport { Movie } from '../../types/Movie';\nimport { MovieData } from '../../types/MovieData';\nimport { ResponseError } from '../../types/ReponseError';\n\nimport { getMovie } from '../../api';\n\ntype Props = {\n  addMovie: (newMovie: Movie) => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({ addMovie }) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  const handleSearchMovie = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setIsLoading(true);\n\n    getMovie(query.trim())\n      .then(result => {\n        if ((result as ResponseError).Error) {\n          setHasLoadingError(true);\n        } else {\n          const {\n            Title,\n            Plot,\n            imdbID,\n            Poster,\n          } = result as MovieData;\n\n          setMovie({\n            title: Title,\n            description: Plot,\n            imdbId: imdbID,\n            imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n            imgUrl: Poster === 'N/A'\n              ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n              : Poster,\n          });\n        }\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  const handleChangeQuery = (value: string) => {\n    setQuery(value);\n    setHasLoadingError(false);\n  };\n\n  const handleAddToTheList = () => {\n    if (movie) {\n      addMovie(movie);\n    }\n\n    setMovie(null);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSearchMovie}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={(e) => handleChangeQuery(e.target.value)}\n            />\n          </div>\n\n          {hasLoadingError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              disabled={!query.trim()}\n              className={classNames(\n                'button',\n                'is-light',\n                {\n                  'is-loading': isLoading,\n                },\n              )}\n            >\n              {movie ? 'Search again' : 'Find a movie'}\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddToTheList}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">\n            Preview\n          </h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=cb8312a1';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[] | []>([]);\n\n  const addMovie = (newMovie: Movie) => {\n    const hasMovie = movies.find(({ imdbId }) => imdbId === newMovie.imdbId);\n\n    if (!hasMovie) {\n      setMovies([...movies, newMovie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}